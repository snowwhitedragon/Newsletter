// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Newsletter.Entities.Data;

#nullable disable

namespace Newsletter.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241018090301_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.10");

            modelBuilder.Entity("Newsletter.Entities.Article", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("NewsletterId")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("Picture")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<bool>("Published")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("PublishedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("PublishedById")
                        .HasColumnType("TEXT");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UpdatedById")
                        .HasColumnType("TEXT");

                    b.HasKey("Id")
                        .HasName("PK__tmp_ms_x__3214EC07A4E01AE0");

                    b.HasIndex(new[] { "CreatedById" }, "IX_Articles_Creator");

                    b.HasIndex(new[] { "NewsletterId" }, "IX_Articles_Newsletter");

                    b.HasIndex(new[] { "PublishedById" }, "IX_Articles_Publisher");

                    b.HasIndex(new[] { "UpdatedById" }, "IX_Articles_Updated");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("Newsletter.Entities.Contact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("LanguageId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ReadableId")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.Property<string>("Salutation")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("StateId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id")
                        .HasName("PK__Contacts__3214EC07EE55F82D");

                    b.HasIndex(new[] { "StateId" }, "IX_Contact_State");

                    b.HasIndex(new[] { "LanguageId" }, "IX_Contacts_Language");

                    b.ToTable("Contacts", t =>
                        {
                            t.HasTrigger("Trigger_GenerateReadable_ForContacts");
                        });
                });

            modelBuilder.Entity("Newsletter.Entities.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("ContactId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ReadableId")
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.HasKey("Id")
                        .HasName("PK__Customer__3214EC077726D01B");

                    b.HasIndex(new[] { "ContactId" }, "IX_Customers_Contact");

                    b.ToTable("Customers", t =>
                        {
                            t.HasTrigger("Trigger_GenerateReadable_ForCustomers");
                        });
                });

            modelBuilder.Entity("Newsletter.Entities.Newsletter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id")
                        .HasName("PK__Newslett__3214EC07399C52A4");

                    b.ToTable("Newsletters");
                });

            modelBuilder.Entity("Newsletter.Entities.Organization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("ResponsibilityType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id")
                        .HasName("PK__Organiza__3214EC070EC7FF12");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("Newsletter.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id")
                        .HasName("PK__Roles__3214EC07336C1F07");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Newsletter.Entities.State", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id")
                        .HasName("PK__States__3214EC0785E078BD");

                    b.HasIndex(new[] { "Title" }, "UQ__States__2CB664DC2034B2EF")
                        .IsUnique();

                    b.HasIndex(new[] { "LanguageCode" }, "UQ__States__8B8C8A34392D791F")
                        .IsUnique();

                    b.ToTable("States");
                });

            modelBuilder.Entity("Newsletter.Entities.Subcontractor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id")
                        .HasName("PK__Subcontr__3214EC0768BF9C51");

                    b.ToTable("Subcontractors");
                });

            modelBuilder.Entity("Newsletter.Entities.Supplier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id")
                        .HasName("PK__Supplier__3214EC0767A70F8D");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("Newsletter.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid?>("ContactId")
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("RegistratedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id")
                        .HasName("PK__tmp_ms_x__3214EC07DD65953D");

                    b.HasIndex(new[] { "ContactId" }, "IX_Users_Contact");

                    b.HasIndex(new[] { "OrganizationId" }, "IX_Users_Organization");

                    b.HasIndex(new[] { "Username" }, "UQ__tmp_ms_x__536C85E4AB504FAA")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("OrganizationNewsletter", b =>
                {
                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("NewsletterId")
                        .HasColumnType("TEXT");

                    b.HasKey("OrganizationId", "NewsletterId")
                        .HasName("PK__Organiza__099116EDF2063989");

                    b.HasIndex(new[] { "NewsletterId" }, "IX_OrganizationNewsletters_Newsletter");

                    b.HasIndex(new[] { "OrganizationId" }, "IX_OrganizationNewsletters_Organization");

                    b.ToTable("OrganizationNewsletters", (string)null);
                });

            modelBuilder.Entity("SubcontractorContact", b =>
                {
                    b.Property<Guid>("SubcontractorId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ContactId")
                        .HasColumnType("TEXT");

                    b.HasKey("SubcontractorId", "ContactId")
                        .HasName("PK__Subcontr__47CDD96A4176EC5B");

                    b.HasIndex(new[] { "ContactId" }, "IX_SubcontractorContacts_Contact");

                    b.HasIndex(new[] { "SubcontractorId" }, "IX_SubcontractorContacts_Subcontractor");

                    b.ToTable("SubcontractorContacts", (string)null);
                });

            modelBuilder.Entity("Subscription", b =>
                {
                    b.Property<Guid>("ContactId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("NewsletterId")
                        .HasColumnType("TEXT");

                    b.HasKey("ContactId", "NewsletterId")
                        .HasName("PK__Subscrip__9F2C3864C76C0BCE");

                    b.HasIndex(new[] { "ContactId" }, "IX_Subscriptions_Contact");

                    b.HasIndex(new[] { "NewsletterId" }, "IX_Subscriptions_Newsletter");

                    b.ToTable("Subscriptions", (string)null);
                });

            modelBuilder.Entity("SupplierContact", b =>
                {
                    b.Property<Guid>("SupplierId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ContactId")
                        .HasColumnType("TEXT");

                    b.HasKey("SupplierId", "ContactId")
                        .HasName("PK__Supplier__EE2004ED308C8D1D");

                    b.HasIndex(new[] { "ContactId" }, "IX_SupplierContacts_Contact");

                    b.HasIndex(new[] { "SupplierId" }, "IX_SupplierContacts_Supplier");

                    b.ToTable("SupplierContacts", (string)null);
                });

            modelBuilder.Entity("UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId")
                        .HasName("PK__UserRole__AF2760AD2783AA04");

                    b.HasIndex(new[] { "RoleId" }, "IX_UserRoles_Role");

                    b.HasIndex(new[] { "UserId" }, "IX_UserRoles_User");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("Newsletter.Entities.Article", b =>
                {
                    b.HasOne("Newsletter.Entities.User", "CreatedBy")
                        .WithMany("ArticleCreatedBies")
                        .HasForeignKey("CreatedById")
                        .IsRequired()
                        .HasConstraintName("FK__Articles__Create__0C50D423");

                    b.HasOne("Newsletter.Entities.Newsletter", "Newsletter")
                        .WithMany("Articles")
                        .HasForeignKey("NewsletterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Articles__Newsle__0B5CAFEA");

                    b.HasOne("Newsletter.Entities.User", "PublishedBy")
                        .WithMany("ArticlePublishedBies")
                        .HasForeignKey("PublishedById")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK__Articles__Publis__0A688BB1");

                    b.HasOne("Newsletter.Entities.User", "UpdatedBy")
                        .WithMany("ArticleUpdatedBies")
                        .HasForeignKey("UpdatedById")
                        .IsRequired()
                        .HasConstraintName("FK__Articles__Update__0D44F85C");

                    b.Navigation("CreatedBy");

                    b.Navigation("Newsletter");

                    b.Navigation("PublishedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("Newsletter.Entities.Contact", b =>
                {
                    b.HasOne("Newsletter.Entities.State", "Language")
                        .WithMany("ContactLanguages")
                        .HasForeignKey("LanguageId")
                        .IsRequired()
                        .HasConstraintName("FK__Contacts__Langua__7A3223E8");

                    b.HasOne("Newsletter.Entities.State", "State")
                        .WithMany("ContactStates")
                        .HasForeignKey("StateId")
                        .IsRequired()
                        .HasConstraintName("FK__Contacts__StateI__7755B73D");

                    b.Navigation("Language");

                    b.Navigation("State");
                });

            modelBuilder.Entity("Newsletter.Entities.Customer", b =>
                {
                    b.HasOne("Newsletter.Entities.Contact", "Contact")
                        .WithMany("Customers")
                        .HasForeignKey("ContactId")
                        .IsRequired()
                        .HasConstraintName("FK__Customers__Conta__65370702");

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("Newsletter.Entities.User", b =>
                {
                    b.HasOne("Newsletter.Entities.Contact", "Contact")
                        .WithMany("Users")
                        .HasForeignKey("ContactId")
                        .HasConstraintName("FK__Users__ContactId__03BB8E22");

                    b.HasOne("Newsletter.Entities.Organization", "Organization")
                        .WithMany("Users")
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("FK__Users__Organizat__02C769E9");

                    b.Navigation("Contact");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("OrganizationNewsletter", b =>
                {
                    b.HasOne("Newsletter.Entities.Newsletter", null)
                        .WithMany()
                        .HasForeignKey("NewsletterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Organizat__Newsl__671F4F74");

                    b.HasOne("Newsletter.Entities.Organization", null)
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Organizat__Organ__662B2B3B");
                });

            modelBuilder.Entity("SubcontractorContact", b =>
                {
                    b.HasOne("Newsletter.Entities.Contact", null)
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Subcontra__Conta__690797E6");

                    b.HasOne("Newsletter.Entities.Subcontractor", null)
                        .WithMany()
                        .HasForeignKey("SubcontractorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Subcontra__Subco__681373AD");
                });

            modelBuilder.Entity("Subscription", b =>
                {
                    b.HasOne("Newsletter.Entities.Contact", null)
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Subscript__Conta__6AEFE058");

                    b.HasOne("Newsletter.Entities.Newsletter", null)
                        .WithMany()
                        .HasForeignKey("NewsletterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Subscript__Newsl__69FBBC1F");
                });

            modelBuilder.Entity("SupplierContact", b =>
                {
                    b.HasOne("Newsletter.Entities.Contact", null)
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__SupplierC__Conta__6CD828CA");

                    b.HasOne("Newsletter.Entities.Supplier", null)
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__SupplierC__Suppl__6BE40491");
                });

            modelBuilder.Entity("UserRole", b =>
                {
                    b.HasOne("Newsletter.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__UserRoles__RoleI__6EC0713C");

                    b.HasOne("Newsletter.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__UserRoles__UserI__01D345B0");
                });

            modelBuilder.Entity("Newsletter.Entities.Contact", b =>
                {
                    b.Navigation("Customers");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Newsletter.Entities.Newsletter", b =>
                {
                    b.Navigation("Articles");
                });

            modelBuilder.Entity("Newsletter.Entities.Organization", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Newsletter.Entities.State", b =>
                {
                    b.Navigation("ContactLanguages");

                    b.Navigation("ContactStates");
                });

            modelBuilder.Entity("Newsletter.Entities.User", b =>
                {
                    b.Navigation("ArticleCreatedBies");

                    b.Navigation("ArticlePublishedBies");

                    b.Navigation("ArticleUpdatedBies");
                });
#pragma warning restore 612, 618
        }
    }
}
